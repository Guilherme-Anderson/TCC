#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <FS.h>
#include <SPIFFS.h>

// Pinos analógicos
const int pinoAmp = 36;
const int pinoVol = 39;

// Parâmetros do ADC e sensor
const float vRef = 3.3;
const float resolucaoADC = 4095.0;
const float sensibilidadeACS = 0.082; // V/A calibrado
const int numAmostras = 500;
const float fatorCorrecaoTensao = 6.03; // Corrige para 19.9V

float offsetCorrente = 0;
float correnteFiltrada = 0;
const float alfa = 0.1; // Peso para o filtro exponencial

// Firebase
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String ssid, password, firebase_host, firebase_auth;
int ID = 0;

// Lê valores do arquivo config.env
String getEnvValue(String key) {
  File file = SPIFFS.open("/config.env", "r");
  if (!file) {
    Serial.println("Erro ao abrir config.env");
    return "";
  }

  while (file.available()) {
    String linha = file.readStringUntil('\n');
    linha.trim();
    if (linha.startsWith("#") || linha.length() == 0) continue;

    int idx = linha.indexOf('=');
    if (idx != -1) {
      String k = linha.substring(0, idx);
      String v = linha.substring(idx + 1);
      k.trim(); v.trim();
      if (k == key) {
        file.close();
        return v;
      }
    }
  }

  file.close();
  return "";
}

void setup() {
  Serial.begin(115200);

  if (!SPIFFS.begin(true)) {
    Serial.println("Erro ao montar SPIFFS");
    return;
  }

  ssid = getEnvValue("WIFI_SSID");
  password = getEnvValue("WIFI_PASSWORD");
  firebase_host = getEnvValue("FIREBASE_HOST");
  firebase_auth = getEnvValue("FIREBASE_AUTH");

  WiFi.begin(ssid.c_str(), password.c_str());
  Serial.print("Conectando ao Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Conectado com IP: ");
  Serial.println(WiFi.localIP());

  config.database_url = firebase_host.c_str();
  config.signer.tokens.legacy_token = firebase_auth.c_str();
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  if (Firebase.ready()) {
    Serial.println("Firebase inicializado com sucesso!");
  } else {
    Serial.println("Falha ao inicializar o Firebase.");
  }

  // Calibração do offset da corrente (assume corrente zero)
  long soma = 0;
  for (int i = 0; i < numAmostras; i++) {
    soma += analogRead(pinoAmp);
    delay(2);
  }
  offsetCorrente = soma / (float)numAmostras;
  Serial.print("Offset calibrado (ADC): ");
  Serial.println(offsetCorrente);
}

void loop() {
  float somaCorrente = 0;

  // 50 ciclos de leituras com filtro exponencial
  for (int i = 0; i < 50; i++) {
    long somaLeituras = 0;
    for (int j = 0; j < numAmostras; j++) {
      somaLeituras += analogRead(pinoAmp);
      delay(1); // pequena espera para estabilidade
    }

    float leituraMedia = somaLeituras / (float)numAmostras;
    float tensaoAmp = (leituraMedia / resolucaoADC) * vRef;
    float vOffset = (offsetCorrente / resolucaoADC) * vRef;
    float correnteAtual = (tensaoAmp - vOffset) / sensibilidadeACS;

    // Aplica o filtro exponencial
    correnteFiltrada = alfa * correnteAtual + (1 - alfa) * correnteFiltrada;

    somaCorrente += correnteFiltrada;
  }

  float valorAmp = somaCorrente / 50.0; // média de 50 leituras filtradas

  // ----- LEITURA DA TENSÃO -----
  int leituraVol = analogRead(pinoVol);
  float vSaidaDivisor = (leituraVol / resolucaoADC) * vRef;
  float valorVol = vSaidaDivisor * fatorCorrecaoTensao;

  // ----- ENVIO AO FIREBASE -----
  float tempo = millis() / 1000.0;
  ID++;
  String path = "/150625-teste/" + String(millis());

  if (Firebase.RTDB.setInt(&fbdo, path + "/ID", ID) &&
      Firebase.RTDB.setFloat(&fbdo, path + "/tempo", tempo) &&
      Firebase.RTDB.setFloat(&fbdo, path + "/valorAmp", valorAmp) &&
      Firebase.RTDB.setFloat(&fbdo, path + "/valorVol", valorVol)) {
    Serial.println("Dados enviados com sucesso!");
    Serial.print("Corrente Média (A): "); Serial.print(valorAmp, 4);
    Serial.print(" | Tensão (V): "); Serial.println(valorVol, 2);
  } else {
    Serial.println("Falha ao enviar dados:");
    Serial.println(fbdo.errorReason());
  }

  delay(500); // tempo entre envios
}
